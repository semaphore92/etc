** k8s 기초 명령어
 (kubectl run 명령어)
    - kubectl run --help

 (도커 허브에서 nginx 이미지를 가져오는 법)
    - kubectl run nginx --image nginx

 (Pods 리스트 조회)
    - kubectl get pods
 (배치 노드 확인)
    - kubectl get pods -o wide


(yml 파일을 통하여 pod 생성)
    - kubectl create -f pod-definition.yml

(pods의 상세정보를 확인할때)
    - kubectl describe pod {myapp-pod}

(pod delete)
    - kubectl delete pod webapp
    - k delete rs {replicaSet_Name}

(deployment delete) 
     - kubectl delete deployment {image_name}

(pod의 정보 수정)
     - kubectl edit pod {image_name}	

       혹은 yaml 파일을 바꾸고
     - kubectl apply -f {yaml_file}


(pod 강제 변경)
     - k replace  --force -f /tmp/*.yaml


(이미 생성된 pod 설정을 yaml 파일로 가져오기)
        - k get pod {image_name} -o yaml > pod.yaml

(kube-system에 떠있는 pods 조회)
	  - k get pods -n kube-system
--------------------------------------------------------------------------------------------------------------------

(replication controller 생성)
     - kubectl create -f rc-definition.yaml	

(replication controller list 조회)
     - kubectl get replicationcontroller	

(replicaset 설정 변경)
     - kubectl replace -f relicaset-definition.yaml

(replicaset scale 증가)
     - kubectl scale --replicas=6 -f replicaset-definition.yml
     - kubectl scale --replicas=6 replicaset myapp-replicaset
--------------------------------------------------------------------------------------------------------------------
** namespace
    (default namespace를 기본적으로 dev namespace(임의) 고정으로 바꿀때
     - k config set-context $(k config current-context) --namespace=dev

     (모든 space의 pods를 조회할 때)
    - k get pods --all-namespaces
(replicaset edit으로 변경)
     - k edit rs {replicaset_name}

---------------------------deployment ---------------------------------

	- k create deployemnt redis-deploy --image-redis --replicas=2 -n dev-ns

---------------------------namespaces ---------------------------------

(namespace 생성)
	- k create namespace dev-ns

---------------------------Imperative Commands ---------------------------------
(pod 즉각 실행 명령어)
     - kubectl run {name} --image={image_name} --labels="tier=db"

(클러스터 내에서 포트 '6379'의 'redis' 애플리케이션을 표시하는 서비스 'redis-service'를 생성합니다)
expose 애플리케이션을 외부에 노출하는데 사용되는 명령어
expose 명령어를 사용하여 Service 객체를 만들 수 있다. Service는 Pod를 추상화하는 k8s 오브젝트이다.
     - k expose pod redis --port 6379 --name redis-service

     - k create deployment webapp --image={image_name} --replicas=3

     - k run custom-nginx --image nginx --port 8080

     - k run httpd --image=httpd:alpine --port=80 --expose=true

(yaml 생성 없이 즉시실행)
     - k run {pod_name} --image={image_name} --dry-run=client -o yaml

--dry-run=client : 만료될수있어서 --dry 대신 앞에걸씀

---------------------------config map ---------------------------------

(config map list 조회)
       - k get configmaps


(config map 상세조회)
     - k describe configmaps

(configmap Imperative create command)
       - k create configmap {config-name} --from-literal={key}={vale} 

(configmap add config)
	- k create configmap {config-name} --from-literal={key}={vale} \ --from-literal={key}={vale} 

(configmap set file path )
      - k create configmap {config-name} --from-file={file_path}


---------------------------secret ---------------------------------
(secret 조회)
	- k get secrets
	- k get secret {secret_name} -o yaml
(secret 생성)
	- k create secret generic {secret-name} --from-literal={key}={value}
	- k create secret generic {secret-name} --from-file={file_path} 

---------------------------security context ---------------------------------

(pod를 실행한 user를 알고 싶을 때)
     - k exec {image_name} -- whoami

(security context 적용)
	- k apply -f {file_name}

   

---------------------------service account ---------------------------------
(service account 생성)
	- k create sa {account_name}

(service account 조회)
	- k get sa

(service account 설정 경로)
	- /var/run/secrets/kubernates.io/serviceaccount

★ 1.24 버전 부터 service account 생성 시 token이 자동 생성되지 않음, 그래서 토큰을 직접 생성해줘야함
	- k create token {service account name}
